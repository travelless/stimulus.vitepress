import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7adef1ff.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"content/5.管理项目.md","filePath":"content/5.管理项目.md"}'),p={name:"content/5.管理项目.md"},o=l(`<p>大多数当代框架都鼓励您始终在JavaScript中保存状态。它们将DOM视为只写的呈现目标，并通过使用来自服务器的JSON的客户端模板进行协调。</p><p>Stimulus采取了不同的方法。一个Stimulus应用的状态以属性的形式存在于DOM中;控制器本身基本上是无状态的。这种方法可以处理来自任何地方的HTML——初始文档、Ajax请求、Turbo访问，甚至是另一个JavaScript库——并且无需任何显式初始化步骤就可以自动启动相关的控制器。</p><h2 id="创建幻灯片" tabindex="-1">创建幻灯片 <a class="header-anchor" href="#创建幻灯片" aria-label="Permalink to &quot;创建幻灯片&quot;">​</a></h2><p>在上一章中，我们学习了如何通过在元素中添加类名来保持一个简单的状态。但是，当我们需要存储一个值，而不仅仅是一个简单的标志时，我们该怎么办呢?</p><p>我们将通过构建一个slideshow控制器来研究这个问题，该控制器将其当前选择的幻灯片索引保存在属性中。</p><p>像往常一样，我们将从HTML开始:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-controller</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;slideshow&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;slideshow#previous&quot;</span><span style="color:#E1E4E8;">&gt; ← &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;slideshow#next&quot;</span><span style="color:#E1E4E8;">&gt; → &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-slideshow-target</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;">&gt;🐵&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-slideshow-target</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;">&gt;🙈&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-slideshow-target</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;">&gt;🙉&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-slideshow-target</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;">&gt;🙊&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-controller</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slideshow&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slideshow#previous&quot;</span><span style="color:#24292E;">&gt; ← &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slideshow#next&quot;</span><span style="color:#24292E;">&gt; → &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-slideshow-target</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slide&quot;</span><span style="color:#24292E;">&gt;🐵&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-slideshow-target</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slide&quot;</span><span style="color:#24292E;">&gt;🙈&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-slideshow-target</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slide&quot;</span><span style="color:#24292E;">&gt;🙉&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-slideshow-target</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;slide&quot;</span><span style="color:#24292E;">&gt;🙊&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>（方框中为三不猴）</strong></p><p>每个幻灯片目标表示幻灯片放映中的一张幻灯片。我们的控制器将负责确保一次只有一张幻灯片可见。</p><p>让我们起草控制器。创建一个新文件src/controllers/slideshow_controller.js，如下所示:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/controllers/slideshow_controller.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Controller } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">targets</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.index</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">previous</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.index</span><span style="color:#F97583;">--</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.slideTargets.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">element.hidden </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.index</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/controllers/slideshow_controller.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Controller } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">targets</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;slide&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.index</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">previous</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.index</span><span style="color:#D73A49;">--</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.slideTargets.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">element.hidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.index</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们的控制器定义了一个方法showCurrentSlide()，它循环遍历每个幻灯片目标，如果其索引匹配，则切换隐藏属性。</p><p>我们通过显示第一张幻灯片来初始化控制器，next()和previous()动作方法推进和后退当前幻灯片。</p><h2 id="生命周期回调解释" tabindex="-1">生命周期回调解释 <a class="header-anchor" href="#生命周期回调解释" aria-label="Permalink to &quot;生命周期回调解释&quot;">​</a></h2><p>initialize()方法做什么?它与我们之前使用的connect()方法有什么不同?</p><p>这些是刺激物生命周期回调方法，当你的控制器进入或离开文档时，它们对于设置或删除相关状态很有用。</p><table><thead><tr><th>方案</th><th>由Stimulus触发...</th></tr></thead><tbody><tr><td>initialize()</td><td>当控制器第一次实例化时</td></tr><tr><td>connect()</td><td>当控制器连接到DOM时</td></tr><tr><td>disconnect()</td><td>当控制器与DOM断开连接时</td></tr></tbody></table><p>重新加载页面并确认Next按钮前进到下一张幻灯片。</p><h2 id="从dom读取初始状态" tabindex="-1">从DOM读取初始状态 <a class="header-anchor" href="#从dom读取初始状态" aria-label="Permalink to &quot;从DOM读取初始状态&quot;">​</a></h2><p>注意我们的控制器是如何在this中跟踪其状态(当前选中的幻灯片)的。索引属性。</p><p>现在假设我们想用第二张幻灯片而不是第一张幻灯片来开始我们的幻灯片。我们如何在标记中编码起始索引?</p><p>一种方法可能是用HTML数据属性加载初始索引。例如，我们可以给控制器的元素添加一个data-index属性:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-controller</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;slideshow&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-controller</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;slideshow&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-index</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后，在initialize()方法中，我们可以读取该属性，将其转换为整数，并将其传递给showCurrentSlide():</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.element.dataset.index)</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.element.dataset.index)</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这可能会完成工作，但它很笨拙，需要我们决定如何命名属性，如果我们想再次访问索引或增加索引并将结果持久化到DOM中，它起不到任何作用。</p><h2 id="使用值" tabindex="-1">使用值 <a class="header-anchor" href="#使用值" aria-label="Permalink to &quot;使用值&quot;">​</a></h2><p>Stimulus控制器支持自动映射到数据属性的类型值属性。当我们在控制器类的顶部添加一个值定义时:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { index: Number }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { index: Number }</span></span></code></pre></div><p>Stimulus项目将创造一个这样的局面。与data-slideshow-index-value属性关联的indexValue控制器属性，并为我们处理数字转换。</p><p>让我们看看实际情况。将相关的data属性添加到HTML中:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-controller</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;slideshow&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-slideshow-index-value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-controller</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;slideshow&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-slideshow-index-value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后向控制器添加一个静态值定义，并更改initialize()方法以记录this.indexValue:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { index: Number }</span></span>
<span class="line"><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue)</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// …</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">values</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { index: Number }</span></span>
<span class="line"><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue)</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// …</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>重新加载页面并验证控制台是否显示1和Number。</p><h2 id="静态值行是怎么回事" tabindex="-1">静态值行是怎么回事? <a class="header-anchor" href="#静态值行是怎么回事" aria-label="Permalink to &quot;静态值行是怎么回事?&quot;">​</a></h2><p>与目标类似，您可以通过在称为values的静态对象属性中描述刺激控制器中的值来定义它们。在本例中，我们定义了一个称为index的单一数值。您可以在参考文档中阅读更多关于值定义的信息。</p><p>现在让我们更新initialize()和控制器中的其他方法来使用它。indexValue代替this.index。这是我们完成后控制器的样子:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Controller } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">targets</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { index: Number }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">previous</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue</span><span style="color:#F97583;">--</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.slideTargets.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">element.hidden </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Controller } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">targets</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;slide&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">values</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { index: Number }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">previous</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue</span><span style="color:#D73A49;">--</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.slideTargets.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">element.hidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>重新加载页面，并使用web检查器来确认控制器元素的data-slideshow-index-value属性在从一张幻灯片移动到下一张时的变化。</p><h2 id="改变回调" tabindex="-1">改变回调 <a class="header-anchor" href="#改变回调" aria-label="Permalink to &quot;改变回调&quot;">​</a></h2><p>修改后的控制器在原始版本的基础上进行了改进，但是对this.showCurrentSlide()的重复调用很突出。我们必须在控制器初始化时以及在更新this.indexValue的每个位置之后手动更新文档的状态。</p><p>我们可以定义一个刺激值更改回调来清理重复，并指定当索引值更改时控制器应该如何响应。</p><p>首先，删除initialize()方法并定义一个新方法indexValueChanged()。然后从next()和previous()中删除对this.showCurrentSlide()的调用:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span><span style="color:#B392F0;">和previous</span><span style="color:#E1E4E8;">()中删除对this.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span><span style="color:#B392F0;">的调用</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Controller } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">targets</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { index: Number }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">previous</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue</span><span style="color:#F97583;">--</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">indexValueChanged</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">showCurrentSlide</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.slideTargets.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   element.hidden </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.indexValue</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span><span style="color:#6F42C1;">和previous</span><span style="color:#24292E;">()中删除对this.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span><span style="color:#6F42C1;">的调用</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Controller } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">targets</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;slide&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">values</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { index: Number }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">previous</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue</span><span style="color:#D73A49;">--</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">indexValueChanged</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">showCurrentSlide</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.slideTargets.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   element.hidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.indexValue</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>重新加载页面并确认幻灯片显示行为是相同的。</p><p>Stimulus在初始化时调用indexValueChanged()方法，并响应data-slideshow-index-value属性的任何更改。你甚至可以在web检查器中摆弄这个属性，控制器就会相应地改变幻灯片。去吧，试试吧!</p><h2 id="设置默认值" tabindex="-1">设置默认值 <a class="header-anchor" href="#设置默认值" aria-label="Permalink to &quot;设置默认值&quot;">​</a></h2><p>也可以将默认值设置为静态定义的一部分。这是这样做的:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { index: { type: Number, default: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> } }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { index: { type: Number, default: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } }</span></span></code></pre></div><p>如果没有在控制器元素上定义data-slideshow-index-value属性，那么索引将从2开始。如果你有其他值，你可以混合和匹配哪些需要默认值，哪些不需要:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { index: Number, effect: { type: String, default: </span><span style="color:#9ECBFF;">&quot;kenburns&quot;</span><span style="color:#E1E4E8;"> } }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { index: Number, effect: { type: String, default: </span><span style="color:#032F62;">&quot;kenburns&quot;</span><span style="color:#24292E;"> } }</span></span></code></pre></div><h2 id="总结和下一步" tabindex="-1">总结和下一步 <a class="header-anchor" href="#总结和下一步" aria-label="Permalink to &quot;总结和下一步&quot;">​</a></h2><p>在本章中，我们看到了如何使用这些值来加载和持久化幻灯片控制器的当前索引。</p><p>从可用性角度来看，我们的控制器是不完整的。当您查看第一张幻灯片时，上一页按钮似乎什么也不做。在内部，indexValue从0递减到-1。我们可以让值绕到最后一张幻灯片的索引吗?(“下一步”按钮也有类似的问题。)</p><p>接下来，我们将了解如何在刺激物控制器中跟踪外部资源，例如计时器和HTTP请求。</p>`,56),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
