import{_ as t,o as a,c as i,Q as l}from"./chunks/framework.7adef1ff.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"content/1.介绍.md","filePath":"content/1.介绍.md"}'),e={name:"content/1.介绍.md"},s=l('<h2 id="关于stimulus" tabindex="-1">关于Stimulus <a class="header-anchor" href="#关于stimulus" aria-label="Permalink to &quot;关于Stimulus&quot;">​</a></h2><p>Stimulus是一个野心适度的JavaScript框架。与其他前端框架不同，Stimulus旨在通过使用简单的注释将JavaScript对象连接到页面上的元素，从而增强静态或服务器渲染的HTML(即“你已经拥有的HTML”)。</p><p>这些JavaScript对象被称为控制器，Stimulus会持续监视页面，等待HTML数据控制器属性的出现。对于每个属性，Stimulus查看属性的值以找到相应的控制器类，创建该类的新实例，并将其连接到元素。</p><p>你可以这样想:就像class属性是连接HTML和CSS的桥梁一样，Stimulus的data-controller属性也是连接HTML和JavaScript的桥梁。</p><p>除了控制器，其他三个主要的Stimulus概念是:</p><ul><li>actions，它使用data-action属性将控制器方法连接到DOM事件</li><li>targets，它定位控制器中重要的元素</li><li>values，它读取、写入和观察控制器元素上的数据属性</li></ul><p>Stimulus对数据属性的使用有助于将内容与行为分开，就像CSS将内容与表示分开一样。此外，Stimulus的约定自然鼓励您按名称对相关代码进行分组。</p><p>接着，Stimulus帮助您构建小型的、可重用的控制器，为您提供足够的结构，使您的代码不至于沦为“JavaScript汤”。</p><h2 id="关于本手册" tabindex="-1">关于本手册 <a class="header-anchor" href="#关于本手册" aria-label="Permalink to &quot;关于本手册&quot;">​</a></h2><p>本手册将通过演示如何编写几个功能齐全的控制器来指导您完成Stimulus的核心概念。每一章都建立在前一章的基础上;从头到尾，您将学习如何:</p><ul><li>在文本字段中打印致姓名的问候语</li><li>当单击按钮时，将文本从文本字段复制到系统剪贴板</li><li>浏览包含多个幻灯片的幻灯片放映</li><li>自动从服务器获取HTML到页面上的元素</li><li>在您自己的应用程序中设置刺激物</li></ul><p>一旦你完成了这里的练习，你将会发现参考文档有助于你·理解Stimulus API的技术细节。</p><p>让我们开始吧!</p>',13),u=[s];function o(r,c,p,n,_,S){return a(),i("div",null,u)}const h=t(e,[["render",o]]);export{d as __pageData,h as default};
