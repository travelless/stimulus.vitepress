import{_ as s,o as a,c as l,Q as o}from"./chunks/framework.60987345.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"content/3.尝试实践.md","filePath":"content/3.尝试实践.md"}'),n={name:"content/3.尝试实践.md"},p=o(`<p>我们已经实现了第一个控制器，并学习了Stimulus如何将HTML连接到JavaScript。现在，让我们通过从Basecamp重新创建控制器，看看我们可以在实际应用程序中使用的东西。</p><h2 id="包装dom剪贴板api" tabindex="-1">包装DOM剪贴板API <a class="header-anchor" href="#包装dom剪贴板api" aria-label="Permalink to &quot;包装DOM剪贴板API&quot;">​</a></h2><p>分散在整个Basecamp的UI是这样的按钮: <img src="https://calmkin-blog-markdown-note.oss-cn-hangzhou.aliyuncs.com/Typora/imgs202310101501109.jpg" alt="IMG_256"></p><p>屏幕截图显示了一个文本字段，里面有一个电子邮件地址，右边有一个“复制到剪贴板”按钮</p><p>当您单击其中一个按钮时，Basecamp会将一些文本(如URL或电子邮件地址)复制到剪贴板上。</p><p>web平台有一个用于访问系统剪贴板的API，但是没有我们需要的HTML元素。要实现“复制到剪贴板”按钮，我们必须使用JavaScript。</p><h2 id="实现复制按钮" tabindex="-1">实现复制按钮 <a class="header-anchor" href="#实现复制按钮" aria-label="Permalink to &quot;实现复制按钮&quot;">​</a></h2><p>假设我们有一个应用程序，它允许我们通过为他们生成PIN来授予其他人访问权限。如果我们可以在按钮旁边显示生成的PIN，以便将其复制到剪贴板以方便共享，那将是很方便的。</p><p>打开public/index.html并替换body&gt;加上按钮的草图:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">PIN: &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1234&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readonly</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;Copy to Clipboard&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">PIN: &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1234&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readonly</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;Copy to Clipboard&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="设置控制器" tabindex="-1">设置控制器 <a class="header-anchor" href="#设置控制器" aria-label="Permalink to &quot;设置控制器&quot;">​</a></h2><p>接下来，创建src/controllers/clipboard_controller.js并添加一个空方法copy():</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/controllers/clipboard_controller.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Controller } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/controllers/clipboard_controller.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Controller } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@hotwired/stimulus&quot;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后在外部<code>&lt;div&gt;</code>中添加data-controller=&quot;clipboard&quot;。任何时候这个属性出现在元素上，Stimulus都会连接一个控制器实例:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-controller</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-controller</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="定义目标" tabindex="-1">定义目标 <a class="header-anchor" href="#定义目标" aria-label="Permalink to &quot;定义目标&quot;">​</a></h2><p>我们需要一个对文本字段的引用，以便在调用剪贴板API之前选择它的内容。将data-clipboard-target=&quot;source&quot;添加到文本字段中:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PIN: &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-clipboard-target</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1234&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readonly</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PIN: &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-clipboard-target</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1234&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readonly</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>现在给控制器添加一个目标定义，这样我们就可以像this.sourceTarget那样访问文本字段元素:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">targets</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#E36209;">targets</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="静态目标线是怎么回事" tabindex="-1">静态目标线是怎么回事? <a class="header-anchor" href="#静态目标线是怎么回事" aria-label="Permalink to &quot;静态目标线是怎么回事?&quot;">​</a></h2><p>当Stimulus加载你的控制器类时，它会在一个名为targets的静态数组中查找目标名称字符串。对于数组中的每个目标名称，Stimulus将向控制器添加三个新属性。在这里，我们的“源”目标名称变成了以下属性:</p><p>this.sourceTarget,计算为控制器作用域中的第一个源目标。如果没有源目标，则访问该属性会抛出错误。</p><p>this.sourceTargets的计算结果为控制器作用域中所有源目标的数组。</p><p>如果有源目标，this.hasourcetarget的计算结果为true，如果没有则为false。</p><p>您可以在参考文档中阅读更多关于目标的信息。</p><h2 id="连接动作" tabindex="-1">连接动作 <a class="header-anchor" href="#连接动作" aria-label="Permalink to &quot;连接动作&quot;">​</a></h2><p>现在我们准备连接Copy按钮。</p><p>我们希望通过点击按钮来调用控制器中的copy()方法，所以我们添加<code>data-action=&quot;clipboard#copy&quot;: </code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-action</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard#copy&quot;</span><span style="color:#E1E4E8;">&gt;Copy to Clipboard&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-action</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard#copy&quot;</span><span style="color:#24292E;">&gt;Copy to Clipboard&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="普通事件有一个简短的动作符号" tabindex="-1">普通事件有一个简短的动作符号 <a class="header-anchor" href="#普通事件有一个简短的动作符号" aria-label="Permalink to &quot;普通事件有一个简短的动作符号&quot;">​</a></h2><p>您可能已经注意到我们省略了<code>click-&gt;</code>从动作描述符。这是因为Stimulus将click定义为“按钮”操作的默认事件。</p><p>某些其他元素也有默认事件。以下是完整的清单:</p><table><thead><tr><th>元素</th><th>默认事件</th></tr></thead><tbody><tr><td>一次</td><td>点击</td></tr><tr><td>按钮</td><td>点击</td></tr><tr><td>细节</td><td>切换</td></tr><tr><td>表单</td><td>提交</td></tr><tr><td>输入</td><td>输入</td></tr><tr><td>输入类型=提交</td><td>点击</td></tr><tr><td>选择</td><td>改变</td></tr><tr><td>文本</td><td>区域输入</td></tr></tbody></table><p>最后，在copy()方法中，我们可以选择输入字段的内容并调用剪贴板API:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">navigator.clipboard.</span><span style="color:#B392F0;">writeText</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.sourceTarget.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">navigator.clipboard.</span><span style="color:#6F42C1;">writeText</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sourceTarget.value)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在浏览器中加载页面并单击Copy按钮。然后切换回文本编辑器并粘贴。您应该看到PIN 1234。</p><h2 id="stimulus控制器是可重复使用的" tabindex="-1">Stimulus控制器是可重复使用的 <a class="header-anchor" href="#stimulus控制器是可重复使用的" aria-label="Permalink to &quot;Stimulus控制器是可重复使用的&quot;">​</a></h2><p>到目前为止，我们已经看到了每次在页面上有一个控制器实例时会发生什么。</p><p>同时在页面上有多个控制器实例是很常见的。例如，我们可能想要显示一个pin列表，每个pin都有自己的Copy按钮。</p><p>我们的控制器是可重用的:任何时候我们想要提供一种方法将一些文本复制到剪贴板上，我们所需要的就是在页面上使用正确的注释进行标记。</p><p>让我们继续向页面添加另一个PIN。复制并粘贴<code>&lt;div&gt;</code>，这样就有两个相同的PIN字段，然后改变第二个的value属性:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-controller</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">PIN: &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-clipboard-target</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;3737&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readonly</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-action</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard#copy&quot;</span><span style="color:#E1E4E8;">&gt;Copy to Clipboard&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-controller</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">PIN: &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-clipboard-target</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;3737&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readonly</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-action</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard#copy&quot;</span><span style="color:#24292E;">&gt;Copy to Clipboard&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>重新加载页面并确认两个按钮都能正常工作。</p><h2 id="动作和目标可以在任何类型的元素上" tabindex="-1">动作和目标可以在任何类型的元素上 <a class="header-anchor" href="#动作和目标可以在任何类型的元素上" aria-label="Permalink to &quot;动作和目标可以在任何类型的元素上&quot;">​</a></h2><p>现在让我们再添加一个PIN字段。这次我们将使用复制链接代替按钮:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-controller</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">PIN: &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-clipboard-target</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;3737&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readonly</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-action</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard#copy&quot;</span><span style="color:#E1E4E8;">&gt;Copy to Clipboard&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-controller</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">PIN: &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-clipboard-target</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;3737&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readonly</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-action</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard#copy&quot;</span><span style="color:#24292E;">&gt;Copy to Clipboard&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Stimulus允许我们使用任何我们想要的元素，只要它有一个合适的数据-动作属性。</p><p>注意，在这种情况下，单击链接还会导致浏览器跟随链接的href。我们可以通过在动作中调用event.preventDefault()来取消这个默认行为:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">navigator.clipboard.</span><span style="color:#B392F0;">writeText</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.sourceTarget.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(event) {</span></span>
<span class="line"><span style="color:#24292E;">event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">navigator.clipboard.</span><span style="color:#6F42C1;">writeText</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sourceTarget.value)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>类似地，我们的源目标不需要是<code> &lt;input type=&quot;text&quot;&gt;</code>。控制器只期望它有一个value属性和一个select()方法。这意味着我们可以使用<code>&lt;textarea&gt;</code>而不是:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PIN: &lt;</span><span style="color:#85E89D;">textarea</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-clipboard-target</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;source&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readonly</span><span style="color:#E1E4E8;">&gt;3737&lt;/</span><span style="color:#85E89D;">textarea</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PIN: &lt;</span><span style="color:#22863A;">textarea</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-clipboard-target</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;source&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readonly</span><span style="color:#24292E;">&gt;3737&lt;/</span><span style="color:#22863A;">textarea</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="总结和下一步" tabindex="-1">总结和下一步 <a class="header-anchor" href="#总结和下一步" aria-label="Permalink to &quot;总结和下一步&quot;">​</a></h2><p>在本章中，我们看了一个真实的例子，将浏览器API包装在一个Stimulus控制器中。我们看到了控制器的多个实例如何同时出现在页面上，我们还探讨了动作和目标如何使HTML和JavaScript松散耦合。</p><p>现在让我们看看对控制器设计的微小更改能够实现怎样巨大的改变。</p>`,55),t=[p];function e(c,r,E,y,i,d){return a(),l("div",null,t)}const g=s(n,[["render",e]]);export{h as __pageData,g as default};
