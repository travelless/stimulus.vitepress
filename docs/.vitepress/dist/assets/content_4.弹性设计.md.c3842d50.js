import{_ as s,o as a,c as p,Q as n}from"./chunks/framework.60987345.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"content/4.弹性设计.md","filePath":"content/4.弹性设计.md"}'),o={name:"content/4.弹性设计.md"},l=n(`<p>尽管剪贴板API在当前浏览器中得到了很好的支持，但我们可能仍然希望有一小部分使用旧浏览器的用户使用我们的应用程序。</p><p>我们还应该预料到人们在访问我们的应用程序时不时会遇到问题。例如，间歇性的网络连接或CDN可用性可能会阻止部分或全部JavaScript加载。</p><p>人们很容易放弃对旧浏览器的支持，认为不值得付出努力，或者认为网络问题是暂时的故障，刷新后会自行解决。但通常以一种优雅地适应这类问题的方式构建功能是非常容易的。</p><p>这种弹性的方法，通常被称为渐进式增强，是交付web界面的实践，这样的基本功能是在HTML和CSS中实现的，当底层技术被浏览器支持时，对基础体验的分层升级是在CSS和JavaScript的基础上逐步进行的。</p><h2 id="逐步增强pin字段" tabindex="-1">逐步增强PIN字段 <a class="header-anchor" href="#逐步增强pin字段" aria-label="Permalink to &quot;逐步增强PIN字段&quot;">​</a></h2><p>让我们来看看如何逐步增强PIN字段，使复制按钮不可见，除非浏览器支持它。这样我们就可以避免向别人展示一个不起作用的按钮。</p><p>我们将从在CSS中隐藏Copy按钮开始。然后我们将在我们的刺激控制器中对剪贴板API的支持进行功能测试。如果支持API，我们将向控制器元素添加类名以显示按钮。</p><p>我们首先将<code>data-clipboard-supported-class=&quot;clipboard——supported&quot;</code>添加到具有data-controller属性的div元素中:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-controller</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-clipboard-supported-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard--supported&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-controller</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-clipboard-supported-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard--supported&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后添加class=&quot;clipboard-button&quot;到button元素:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data-action</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard#copy&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;clipboard-button&quot;</span><span style="color:#E1E4E8;">&gt;Copy to Clipboard&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data-action</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard#copy&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;clipboard-button&quot;</span><span style="color:#24292E;">&gt;Copy to Clipboard&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后将以下样式添加到public/main.css中:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.clipboard</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">button {</span></span>
<span class="line"><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">: none;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">.clipboard</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">supported .clipboard</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">button {</span></span>
<span class="line"><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">: initial;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.clipboard</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">button {</span></span>
<span class="line"><span style="color:#6F42C1;">display</span><span style="color:#24292E;">: none;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">.clipboard</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">supported .clipboard</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">button {</span></span>
<span class="line"><span style="color:#6F42C1;">display</span><span style="color:#24292E;">: initial;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先，我们将在控制器内部添加data-clipboard-supported-class属性作为一个静态类:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static classes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;supported&quot;</span><span style="color:#E1E4E8;"> ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static classes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;supported&quot;</span><span style="color:#24292E;"> ]</span></span></code></pre></div><p>这将使我们能够控制HTML中的特定CSS类，因此我们的控制器更容易适应不同的CSS方法。像这样添加的特定类可以通过this. supportedclass访问。</p><p>现在为控制器添加一个connect()方法，该方法将测试是否支持剪贴板API，并为控制器的元素添加一个类名:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;clipboard&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> navigator) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.element.classList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.supportedClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;clipboard&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> navigator) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.element.classList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.supportedClass);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以把这个方法放在控制器类体的任何地方。</p><p>如果您愿意，可以在浏览器中禁用JavaScript，重新加载页面，注意Copy按钮不再可见。</p><p>我们已经逐步增强了PIN字段:它的复制按钮的基线状态是隐藏的，只有当我们的JavaScript检测到支持剪贴板API时才会显示。</p><h2 id="总结和下一步" tabindex="-1">总结和下一步 <a class="header-anchor" href="#总结和下一步" aria-label="Permalink to &quot;总结和下一步&quot;">​</a></h2><p>在本章中，我们略微修改了剪贴板控制器，以适应旧浏览器和退化的网络条件。</p><p>接下来，我们将了解刺激控制器如何管理状态。</p>`,24),t=[l];function e(c,r,i,E,y,d){return a(),p("div",null,t)}const h=s(o,[["render",e]]);export{b as __pageData,h as default};
